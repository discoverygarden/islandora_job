<?php

/**
 * @file
 * Hooks and API for the islandora_job_module.
 */

const ISLANDORA_JOB_STATE__ERROR = -1;
const ISLANDORA_JOB_STATE__WAITING = 0;
const ISLANDORA_JOB_STATE__RUNNING = 1;
const ISLANDORA_JOB_VIEW_MESSAGES = 'view islandora job messages';

/**
 * Implements hook_menu().
 */
function islandora_job_menu() {
  $items = array();
  $items['admin/islandora/tools/job'] = array(
    'title' => 'Islandora Job',
    'description' => 'Configuration page for the Islandora Job module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_job_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.form.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_job_permission() {
  $perms = array();

  $perms[ISLANDORA_JOB_VIEW_MESSAGES] = array(
    'title' => t('View Islandora Jobs messages'),
    'description' => t('See reporting messages from the Gearman queue.'),
  );
  return $perms;
}

/**
 * Runs a job in the foreground.
 *
 * Returns the result of the job to the requesting code. All parameters other
 * than the job name are considered arguments for the job.  Arguments get
 * JSON encoded as an array.
 *
 * @param string $job_name
 *   Name of the job to run.
 *
 * @return string|bool
 *   The result of the job or FALSE if it was not queued for duping.
 */
function islandora_job_submit($job_name) {
  module_load_include('inc', 'islandora_job', 'includes/utilities');
  module_load_include('inc', 'islandora_job', 'includes/db');

  $args = func_get_args();
  $payload = islandora_job_format_payload($job_name, $args);
  $subs = array(
    '@job' => $job_name,
    '@args' => print_r($args, TRUE),
  );

  if (islandora_job_ensure_job_deduping($payload)) {
    $state_id = islandora_job_insert_job_status($payload);
    try {
      $client = islandora_job_get_client();
      $job_handle = $client->doNormal(islandora_job_function_name($job_name), $payload);
      if ($client->returnCode() != GEARMAN_SUCCESS) {
        throw new Exception(t('Failed to successfully enqueue...'));
      }
      return $job_handle;
    }
    catch (Exception $e) {
      watchdog('islandora_job', 'Failed to execute job @job due to an exception. Exception message: @message Args: @args', $subs + array(
        '@message' => $e->getMessage(),
      ), WATCHDOG_WARNING);
      islandora_job_remove_job_status($state_id);
      return FALSE;
    }
  }
  else {
    watchdog('islandora_job', 'Job already queued; deduping @job with args: @args', $subs, WATCHDOG_DEBUG);
  }
}

/**
 * Runs a job in the background.
 *
 * The result is never returned to the requesting code. All parameters other
 * than the job name are considered arguments for the job.  Arguments get
 * JSON encoded as an array.
 *
 * @param string $job_name
 *   Name of the job to run.
 *
 * @return string|bool
 *   The job handle or FALSE if it was not queued.
 */
function islandora_job_submit_background($job_name) {
  module_load_include('inc', 'islandora_job', 'includes/utilities');
  module_load_include('inc', 'islandora_job', 'includes/db');
  $args = func_get_args();
  $payload = islandora_job_format_payload($job_name, $args);
  $subs = array(
    '@job' => $job_name,
    '@args' => print_r($args, TRUE),
  );

  if (islandora_job_ensure_job_deduping($payload)) {
    $state_id = islandora_job_insert_job_status($payload);
    try {
      $client = islandora_job_get_client();
      $job_handle = $client->doBackground(islandora_job_function_name($job_name), $payload);
      if ($client->returnCode() != GEARMAN_SUCCESS) {
        throw new Exception(t('Failed to successfully enqueue...'));
      }
      return $job_handle;
    }
    catch (Exception $e) {
      watchdog('islandora_job', 'Failed to submit job @job due to an exception. Exception message: @message Args: @args', $subs + array(
        '@message' => $e->getMessage(),
      ), WATCHDOG_WARNING);
      islandora_job_remove_job_status($state_id);
      return FALSE;
    }
  }
  else {
    watchdog('islandora_job', 'Job already queued; deduping @job with args: @args', $subs, WATCHDOG_DEBUG);
  }

  return FALSE;
}

/**
 * Runs multiple jobs with as much concurrency as possible.
 *
 * Blocks until all are complete.
 *
 * @param array $tasks
 *   Contains any number of entries that look like this:
 *   [
 *     'job_name' => 'my_sweet_job_function',
 *     'args' => array('herp', 'derp'),
 *   ].
 * @param callable|null $callback
 *   A callback for when each task is completed.  See
 *   http://php.net/manual/en/gearmanclient.setcompletecallback.php
 *   and http://gearman.org/examples/multi-query/ for more.
 *
 * @return bool
 *   TRUE on success.
 */
function islandora_job_submit_batch(array $tasks, $callback = NULL) {
  module_load_include('inc', 'islandora_job', 'includes/utilities');
  $client = islandora_job_get_client();
  if (!is_null($callback)) {
    $client->setCompleteCallback($callback);
  }
  foreach ($tasks as $task) {
    $job_name = $task['job_name'];
    $args = $task['args'];
    // Push on a dummy arg as if this array came from func_get_args().
    array_unshift($args, '');
    $payload = islandora_job_format_payload($job_name, $args);
    $client->addTask(islandora_job_function_name($job_name), $payload);
  }
  return $client->runTasks();
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_job_islandora_view_object(AbstractObject $object) {
  if (variable_get('islandora_job_display_messages', FALSE) && islandora_object_access(ISLANDORA_JOB_VIEW_MESSAGES, $object)) {
    global $base_url;

    $connection = variable_get('islandora_job_display_messages_remote_database', FALSE) ?
      Database::getConnection('default', 'gearman_queue') :
      Database::getConnection();

    $like_pid = format_string('%"!like"%', array(
      '!like' => $connection->escapeLike($object->id),
    ));
    $like_url = format_string('%!like%', array(
      '!like' => $connection->escapeLike(json_encode($base_url)),
    ));

    $query = $connection->select('gearman_queue', 'g')
      ->fields('g', array())
      ->condition('data', $like_pid, 'LIKE');

    if ($connection->driver() == 'pgsql') {
      // XXX: Need to escape the backslashes some more, so they match the
      // escaped contents...
      $query->condition('data', addcslashes($like_url, '\\'), 'LIKE');
    }
    else {
      $query->condition('data', $like_url, 'LIKE');
    }
    $results = $query->execute();

    $rows = $results->fetchAll(PDO::FETCH_ASSOC);

    $jobs = array();
    foreach ($rows as $row) {
      $data = json_decode($row['data'], TRUE);
      $jobs[] = $data['func'];
    }
    if (!empty($jobs)) {
      drupal_set_message(format_plural(count($jobs), 'There is one job waiting to be processed in the Gearman queue: !jobs.', 'There are @count jobs waiting to be processed: !jobs', array('!jobs' => implode(' ,', $jobs))), 'warning');
    }
  }
}
